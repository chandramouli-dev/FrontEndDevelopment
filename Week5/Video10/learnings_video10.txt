Learning Notes: Responsive Web Design (RWD)
1. What is Responsive Design?
Responsive Design means building web pages that adapt gracefully to different screen sizes (desktop, tablet, mobile).
Achieved using:
Fluid layouts with flex, grid, and %/auto widths.
Media Queries (@media) to apply different CSS rules at different breakpoints.

2. HTML Structure Highlights
Semantic Sections: Header, Hero, Feature, Intro, Services, Ready, Blog, Testimony, Footer.
Images + Text Combo: Almost every section is a two-column layout (image on one side, text on the other).
Consistent Master Wrappers: Each section has a -master wrapper (for full width & background) and an inner container (for max-width).

3. CSS Concepts Practiced
a. Box Model Reset
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}
Ensures consistent padding/margin handling.

b. Flexbox Layouts
Used for alignment and splitting space.
Example:
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
Benefits: No floats, responsive by default.

c. CSS Grid
Used in readycontent-master to create multiple columns.
.readycontent-master {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 20px;
}

d. Responsive Media Queries
@media (max-width:768px) {
  .header ul { flex-direction: column; }
  .hero .left, .hero .right { width: 100%; }
  .feature { flex-direction: column; }
  .readycontent-master { grid-template-columns: 1fr; }
}
Breakpoint = 768px (common tablet/mobile width).
Changes multi-column layouts → single column.

4. Section-by-Section Learnings
Header
Desktop: Logo + menu side by side.
Mobile: Menu stacks vertically.
Hero Section
Desktop: Text (left) + Image (right).
Mobile: Both stack vertically.
Features
Desktop: Row with 3 images.
Mobile: Column with centered images.
Services, Blog, Testimony
Desktop: 2-column layouts.
Mobile: Full-width stacked layout.
Ready Section
Grid with 2 columns → collapses to 1 column on mobile.
Footer
Desktop: Row of 4 images + inline social icons.
Mobile: Images stack vertically.

5. Responsive Design Patterns Practiced
Mobile-first approach: Start with desktop, then adapt for smaller screens via @media.
Fluid images: width: 100% ensures images resize with parent container.
Max-width containers: Prevent content from stretching too wide on large screens.
Stacking layouts: 2-column → 1-column when width < 768px.

6. Key Takeaways
Flexbox is best for rows/columns that need alignment.
Grid is powerful for card-like layouts.
Media Queries let you adapt the layout at breakpoints.
Consistent patterns (wrappers, max-width, width:100%) make layouts predictable.
Always test in desktop, tablet, and mobile views.